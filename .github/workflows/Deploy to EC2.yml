name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/chesley_web:${{ github.sha }}
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -vvv -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} << 'ENDSSH'
        set -ex
        echo "Deploying new version..."
        cd /opt/website || exit 1
        # Pull the latest changes
        git pull origin main
        # Build and start the new container
        docker-compose -f docker-compose.prod.yml up -d --build
        # Run migrations
        docker-compose -f docker-compose.prod.yml exec web python manage.py migrate
        # Collect static files
        docker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput
        # Restart Nginx
        sudo systemctl restart nginx
        echo "Deployment completed successfully!"
        ENDSSH
    - name: Verify Deployment
      env:
        HOST: ${{ secrets.EC2_HOST }}
      run: |
        response=$(curl -sS -o /dev/null -w "%{http_code}" https://${HOST})
        if [ $response = "200" ]; then
          echo "Deployment verified successfully!"
        else
          echo "Deployment verification failed. HTTP status code: $response"
          exit 1
        fi
