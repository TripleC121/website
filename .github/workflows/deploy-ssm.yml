name: Deploy to EC2 using AWS Systems Manager

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to EC2 using AWS Systems Manager
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "cd /opt/website",
                "echo \"Current directory: $(pwd)\"",
                "echo \"Before git operations:\"",
                "sudo -u webapps git status",
                "sudo -u webapps git rev-parse HEAD",
                "echo \"Fetching changes:\"",
                "sudo -u webapps git fetch --all || { echo \"Git fetch failed\"; exit 1; }",
                "echo \"Resetting to origin/main:\"",
                "sudo -u webapps git reset --hard origin/main || { echo \"Git reset failed\"; exit 1; }",
                "echo \"After git operations:\"",
                "sudo -u webapps git status",
                "sudo -u webapps git rev-parse HEAD",
                "echo \"Checking specific files:\"",
                "sudo -u webapps git log -n 1 -- README.md",
                "sudo -u webapps git log -n 1 -- version",
                "echo \"Docker operations:\"",
                "echo \"${{ secrets.DOCKERHUB_TOKEN }}\" | sudo -u webapps docker login -u \"${{ secrets.DOCKERHUB_USERNAME }}\" --password-stdin || { echo \"Docker login failed\"; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml down || { echo \"Docker-compose down failed\"; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml build --no-cache || { echo \"Docker-compose build failed\"; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml up -d || { echo \"Docker-compose up failed\"; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate || { echo \"Django migrate failed\"; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput || { echo \"Django collectstatic failed\"; exit 1; }",
                "sudo systemctl restart nginx || { echo \"Nginx restart failed\"; exit 1; }",
                "sudo -u webapps docker logout",
                "echo \"Final git status:\"",
                "sudo -u webapps git status",
                "echo \"Deployment completed successfully\""
              ]
            }' \
            --output text
      # - name: Modify Security Group for verification
      #   run: |
      #     GITHUB_IP=$(curl -s https://api.github.com/meta | jq -r '.actions[0]')
      #     aws ec2 authorize-security-group-ingress \
      #       --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
      #       --protocol tcp \
      #       --port 8080 \
      #       --cidr $GITHUB_IP
      # - name: Verify deployment
      #   run: |
      #     sleep 30
      #     response=$(curl -sS -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_PUBLIC_IP }}:8080)
      #     if [ $response = "200" ]; then
      #       echo "Deployment verified successfully"
      #     else
      #       echo "Deployment verification failed"
      #       exit 1
      #     fi
      # - name: Remove temporary Security Group rule
      #   if: always()
      #   run: |
      #     GITHUB_IP=$(curl -s https://api.github.com/meta | jq -r '.actions[0]')
      #     aws ec2 revoke-security-group-ingress \
      #       --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
      #       --protocol tcp \
      #       --port 8080 \
      #       --cidr $GITHUB_IP
