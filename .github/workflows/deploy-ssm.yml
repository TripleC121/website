name: Deploy to EC2 using AWS Systems Manager

on:
  push:
    branches: [ '*' ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EC2 using AWS Systems Manager
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "LOG_FILE=/var/log/chesley_web/deployment.log",
                "mkdir -p /var/log/chesley_web",
                "touch $LOG_FILE",
                "chmod 644 $LOG_FILE",
                "echo \"Deployment started at $(date)\" >> $LOG_FILE",
                "cd /opt/website",
                "echo \"Current directory: $(pwd)\" >> $LOG_FILE",
                "echo \"Git operations:\" >> $LOG_FILE",
                "sudo -u webapps GIT_SSH_COMMAND=\"ssh -i /home/webapps/.ssh/github_actions_deploy_key -o IdentitiesOnly=yes\" git fetch --all >> $LOG_FILE 2>&1 || { echo \"Git fetch failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps GIT_SSH_COMMAND=\"ssh -i /home/webapps/.ssh/github_actions_deploy_key -o IdentitiesOnly=yes\" git reset --hard origin/main >> $LOG_FILE 2>&1 || { echo \"Git reset failed\" >> $LOG_FILE; exit 1; }",
                "echo \"After git operations:\" >> $LOG_FILE",
                "sudo -u webapps git status >> $LOG_FILE",
                "sudo -u webapps git rev-parse HEAD >> $LOG_FILE",
                "echo \"Docker operations:\" >> $LOG_FILE",
                "echo \"${{ secrets.DOCKERHUB_TOKEN }}\" | sudo -u webapps docker login -u \"${{ secrets.DOCKERHUB_USERNAME }}\" --password-stdin >> $LOG_FILE 2>&1 || { echo \"Docker login failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml down >> $LOG_FILE 2>&1 || { echo \"Docker-compose down failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps docker system prune -af >> $LOG_FILE 2>&1 || { echo \"Docker system prune failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml build --no-cache >> $LOG_FILE 2>&1 || { echo \"Docker-compose build failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml up -d >> $LOG_FILE 2>&1 || { echo \"Docker-compose up failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate >> $LOG_FILE 2>&1 || { echo \"Django migrate failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput >> $LOG_FILE 2>&1 || { echo \"Django collectstatic failed\" >> $LOG_FILE; exit 1; }",
                "sudo systemctl restart nginx >> $LOG_FILE 2>&1 || { echo \"Nginx restart failed\" >> $LOG_FILE; exit 1; }",
                "sudo -u webapps docker logout >> $LOG_FILE 2>&1",
                "echo \"Deployment completed at $(date)\" >> $LOG_FILE"
              ]
            }' \
            --output text
